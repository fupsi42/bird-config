# Gitoyen <contact@gitoyen.net>
#
# vim: set ts=4:sw=4

# Filter limiting accepted prefixes on members and customers BGP sessions
#
# NB: the '+' sign is necessary for backhole management
#
# TODO: Content of this function could be filled semi-automatically using the IRR
# bgpq3 -3A -b -6 -R 128 -S NTTCOM,RADB,RIPE,RIPE-NONAUTH,ALTDB,BELL,LEVEL3,RGNET,APNIC,JPIRR,ARIN,BBOI,TC,REGISTROBR,AFRINIC,ARIN-WHOIS,RPKI -l as_prefixes -- AS-GITOYEN
function is_net_from_member(int AS)
prefix set as_prefixes;
{

    case AS {
        # Grenode
        51083:  as_prefixes = [
                        2001:912::/36+,         # GRENODE-IPV6
                        2001:912:1000::/36+,    # REZINE-MAIN-IPV6
                        2001:912:2000::/36+,    # ILICO-IPV6
                        2001:912:3000::/36+,    # HADOLY-IPV6
                        2001:912:4000::/36+,    # REZINE-CAMBUSE-IPV6
                        2a00:5881:4000::/40+,   # ILLYSE-ALLOC-LYON
                        2a00:5881:c000::/40+,   # ILLYSE-ALLOC-ST-ETIENNE
                        2a0e:4f80::/29+,        # FR-REZINE-20190517
                        2a0e:c400::/29+         # FR-ILLYSE-20190410
        ];
        # Lorraine Data Network
        60197: as_prefixes = [
                        2001:913::/36+        # LDN-IPV6
        ];
        # Midways Network
        204708: as_prefixes = [
                        2001:913:3000::/36+,  # MIDWAYNETWORK-IPV6
                        2a0c:b641:590::/44+,  # FR-QUENTINW-20190725
                        2a0e:b107:160::/44+   # FR-QUENTINWAWER-20190922
        ];
        # Lautrenet
        64600:  as_prefixes = [
                        2001:910:2000::/48+   # LAUTRE-IPV6
        ];
        # Toile-Libre
        48920:  as_prefixes = [
                        2a04:9ac3::/32+       # FREMONET
        ];
        # FDN
        65055:  as_prefixes = [
                        2001:910:800::/40+,   # FDN-IPV6
                        2001:910:1000::/38+   # FDN-IPV6-ACCESS
        ];
        else: print "is_net_from_member: The AS number is unknown"; return false;
    }

    return (net ~ as_prefixes);
}

# prefix equivalent of rfc1918
function is_rfc1918() {
  return net ~ [ FC00::/7+ ];
}

# This function excludes weird networks
#  rfc1918, class D, class E
function is_martians() {
  return net ~ [ FE80::/10+, fec0::/10+, FF00::/8+, ::/96+, 0100::/64+, 2001:10::/28+, 2001:0db8::/32+, fc00::/7+ ];
}

# Routes within Gitoyen
function is_within_gitoyen() {
  return net ~ [ 2001:910::/32{33,128} ];
}

# Gitoyen's routes
function is_gitoyen() {
  return net ~ [ 2001:910::/32 ];
}

# Routes corresponding to carp prefixes routes
function is_within_carp() {
  return net ~ [ 2001:910:0:4::/64{65,128}, 2001:910:0:40::/64{65,128}, 2001:910:0:41::/64{65,128}, 2001:910:0:117::/64{65,128}, 2001:910:0:3021::/64{65,128} ];
}

# Default route
function is_default() {
  return (net ~ [ ::/0 ]);
}
