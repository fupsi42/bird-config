# Gitoyen <contact@gitoyen.net>
#
# vim: set ts=4:sw=4

# bgp import function
# this function import routes according to the import_type and the AS number. It also add tag the route with
# the  given community
#
# Parameters
#    AS           / AS number of the peer
#    import_type  / the import type. Could be
#                       transit:  this is a transit session
#                       peering:  this is a peering session on an Internet Exchange Point (including route
#                                 servers)
#                       member:   this is a member of Gitoyen.
#                       core:     this is a core session. It's the backbone iBGP sessions.
#    community    / community number to associate to the route. If equal 0, there is no association.
#
function bgp_import( int AS; string import_type; int community)
{
    if ! (import_type = "transit" || import_type="peering" || import_type="member" || import_type="core") then {
        print "bgp_import: parametre import_type invalide";
        return false;
    }

    if community > 65535 then {
        print "bgp_import: wrong community number";
        return false;
    }

    # weird routes are not accepted
    if is_default() || is_martians() || is_rfc1918() then return false;

    # gitoyen's routes are not accepted
    if is_gitoyen() then return false;

    # in case of peering or transit, the routes within the gitoyen's network are not accepted.
    if import_type = "peering" && import_type = "transit" then {
        if is_within_gitoyen() then return false;
    }

    # in case of member, only the routes defined for the member AS are accepted.
    if import_type = "member" && ! is_net_from_member(AS) then return false;

    # bgp local preference by default
    if import_type = "transit"         then bgp_local_pref=100;
    if import_type = "peering"         then bgp_local_pref=1000;
    if import_type = "member"          then bgp_local_pref=1500;

    # communities cleaning (only communities handled by Gitoyen are kept)
    if import_type = "transit" then  bgp_community.delete( [(20766,*)] );
    if import_type = "peering" then  bgp_community.delete( [(20766,*)] );
    if import_type = "member"  then  bgp_community.filter( [(20766,9999)] );

    # adding the community to identify the source of the route
    if import_type != "core" && community > 0 then bgp_community.add((20766,community));

    return true;
}

# bgp export function
# this function export routes according to the export_type and the AS number.
#
# Parameters
#    AS           / AS number of the peer
#    export_type  / the export type. Could be
#                       full:     The full-view are exported
#                       default:  The default route are exported
#                       members:  The routes of the members are exported
#                       core:     All the routes learned by bgp are exported
#
function bgp_export(int AS; string export_type)
pair set members_export_communities;
pair set full_export_communities;
{

    if ! (export_type = "full" || export_type="default" || export_type="core" || export_type="members") then {
        print "bgp_export: parametre export_type invalide";
        return false;
    }

    # weird routes are not accepted
    if is_martians() || is_rfc1918() then return false;

    # the default route are not exported except if asked.
    if is_default() && ! (export_type="default") then return false;

    # for the routes of the members, only the routes having one of these communities are exported
    members_export_communities = [
            (20766,1),
            (20766,9999),
            (20766,40000..49999)
    ];
    if export_type = "members"
        && filter(bgp_community, members_export_communities).len = 0 then return false;

    # for the full-view, only the routes having one of these communities are exported
    full_export_communities = [
            (20766,1),
            (20766,9999),
            (20766,10000..19999),
            (20766,20000..29999),
            (20766,30000..39999),
            (20766,40000..49999)
    ];
    if export_type = "full"
        && filter(bgp_community, full_export_communities).len = 0 then return false;

    # for the default, only the default route are exported.
    if export_type = "default"
        && ! is_default() then return false;

    # for the core export type, only the routes learned by BGP are exported
    if export_type = "core"
        && source != RTS_BGP then return false;

    # blackhole management
    if filter(bgp_community, [ (20766,9999) ]).len > 0 then {
        case AS {
            # Absolight
            29608:  bgp_community.add ((29608,65001));
            # Tata
            6453:   bgp_community.add ((64999,0));
            # Ielo
            29075:  bgp_community.add ((29075,0));
            # By default, don't announce a blackhole route, because it would be
            # interpreted as a regular route.  Since it is more specific, it
            # would attract traffic, which is precisely the opposite of the
            # desired behaviour when blackholing...
            else:   return false;
        }
    }

    return true;
}
